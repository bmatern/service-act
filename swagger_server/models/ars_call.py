# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class ArsCall(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, allele: str=None, group_type: str=None, group: str=None, version: str=None):
        """
        ArsCall - a model defined in Swagger

        :param allele: The allele of this ArsCall.
        :type allele: str
        :param group_type: The group_type of this ArsCall.
        :type group_type: str
        :param group: The group of this ArsCall.
        :type group: str
        :param version: The version of this ArsCall.
        :type version: str
        """
        self.swagger_types = {
            'allele': str,
            'group_type': str,
            'group': str,
            'version': str
        }

        self.attribute_map = {
            'allele': 'allele',
            'group_type': 'group_type',
            'group': 'group',
            'version': 'version'
        }

        self._allele = allele
        self._group_type = group_type
        self._group = group
        self._version = version

    @classmethod
    def from_dict(cls, dikt) -> 'ArsCall':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ArsCall of this ArsCall.
        :rtype: ArsCall
        """
        return deserialize_model(dikt, cls)

    @property
    def allele(self) -> str:
        """
        Gets the allele of this ArsCall.

        :return: The allele of this ArsCall.
        :rtype: str
        """
        return self._allele

    @allele.setter
    def allele(self, allele: str):
        """
        Sets the allele of this ArsCall.

        :param allele: The allele of this ArsCall.
        :type allele: str
        """

        self._allele = allele

    @property
    def group_type(self) -> str:
        """
        Gets the group_type of this ArsCall.

        :return: The group_type of this ArsCall.
        :rtype: str
        """
        return self._group_type

    @group_type.setter
    def group_type(self, group_type: str):
        """
        Sets the group_type of this ArsCall.

        :param group_type: The group_type of this ArsCall.
        :type group_type: str
        """

        self._group_type = group_type

    @property
    def group(self) -> str:
        """
        Gets the group of this ArsCall.

        :return: The group of this ArsCall.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group: str):
        """
        Sets the group of this ArsCall.

        :param group: The group of this ArsCall.
        :type group: str
        """

        self._group = group

    @property
    def version(self) -> str:
        """
        Gets the version of this ArsCall.

        :return: The version of this ArsCall.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """
        Sets the version of this ArsCall.

        :param version: The version of this ArsCall.
        :type version: str
        """

        self._version = version

